// Generated by CoffeeScript 1.6.3
(function() {
  var ApiKeyAuthorization, PasswordAuthorization, SwaggerApi, SwaggerAuthorizations, SwaggerHttp, SwaggerModel, SwaggerModelProperty, SwaggerSubType, SwaggerOperation, SwaggerRequest, SwaggerResource,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  // Convert the URL to a window.location based URL	
  function convertUrl(url) {
     if (SwaggerUiConfig.apiDocsAndRestOnSameServer) {
    	var tempUrl;
    	var schemeDelim = "://";
    	var index = url.indexOf(schemeDelim);
    	if (index !== -1) {
      		index = url.indexOf("/", index + schemeDelim.length);
      		tempUrl = location.protocol + "//" + location.host;
      		if (index !== -1) {
        		tempUrl += url.substring(index);
      		}
      	    return tempUrl;
    	}
  	 }  	 
  	 return url;  	 
  }

  SwaggerApi = (function() {
    SwaggerApi.prototype.url = "http://api.wordnik.com/v4/resources.json";

    SwaggerApi.prototype.debug = false;

    SwaggerApi.prototype.basePath = null;

    SwaggerApi.prototype.authorizations = null;

    SwaggerApi.prototype.authorizationScheme = null;

    SwaggerApi.prototype.info = null;

    function SwaggerApi(url, options) {
      if (options == null) {
        options = {};
      }
      if (url) {
        if (url.url) {
          options = url;
        } else {
          this.url = url;
        }
      } else {
        options = url;
      }
      if (options.url != null) {
        this.url = options.url;
      }
      if (options.success != null) {
        this.success = options.success;
      }
      this.apisSorter = options.apisSorter;
      this.failure = options.failure != null ? options.failure : function() {};
      this.progress = options.progress != null ? options.progress : function() {};
    }

    SwaggerApi.prototype.build = function() {
      var e, obj,
        _this = this;
      this.progress('fetching resource list: ' + this.url);
      obj = {
        url: this.url,
        method: "get",
        headers: {},
        on: {
          error: function(response) {
            if (_this.url.substring(0, 4) !== 'http') {
              return _this.fail('Please specify the protocol for ' + _this.url);
            } else if (response.status === 0) {
              return _this.fail('Can\'t read from server.  It may not have the appropriate access-control-origin settings.');
            } else if (response.status === 404) {
              return _this.fail('Can\'t read swagger JSON from ' + _this.url);
            } else {
              return _this.fail(response.status + ' : ' + response.statusText + ' ' + _this.url);
            }
          },
          response: function(rawResponse) {
            var response;
            response = JSON.parse(rawResponse.content.data);
            _this.swaggerVersion = response.swaggerVersion;
            if (_this.swaggerVersion === "1.2") {
              return _this.buildFromSpec(response);
            } else {
              return _this.buildFrom1_1Spec(response);
            }
          }
        }
      };
      e = {};
      if (typeof window !== 'undefined') {
        e = window;
      } else {
        e = exports;
      }
      e.authorizations.apply(obj);
      new SwaggerHttp().execute(obj);
      return this;
    };

    SwaggerApi.prototype.buildFromSpec = function(response) {
      var api, isApi, newName, operation, res, resource, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      if (response.apiVersion != null) {
        this.apiVersion = response.apiVersion;
      }
      this.apis = {};
      this.apisArray = [];
      this.produces = response.produces;
      this.authSchemes = response.authorizations;
      if (response.info != null) {
        this.info = response.info;
      }
      isApi = false;
      _ref = response.apis;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        api = _ref[_i];
        if (api.operations) {
          _ref1 = api.operations;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            operation = _ref1[_j];
            isApi = true;
          }
        }
      }
      if (response.basePath) {
        this.basePath = response.basePath;
      } else if (this.url.indexOf('?') > 0) {
        this.basePath = this.url.substring(0, this.url.lastIndexOf('?'));
      } else {
        this.basePath = this.url;
      }
      if (isApi) {
        newName = response.resourcePath.replace(/\//g, '');
        this.resourcePath = response.resourcePath;
        res = new SwaggerResource(response, this);
        this.apis[newName] = res;
        this.apisArray.push(res);
      } else {
        _ref2 = response.apis;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          resource = _ref2[_k];
          res = new SwaggerResource(resource, this);
          this.apis[res.name] = res;
          this.apisArray.push(res);
        }
      }
      if (this.success) {
        this.success();
      }
      return this;
    };

    SwaggerApi.prototype.buildFrom1_1Spec = function(response) {
      var api, isApi, newName, operation, res, resource, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      console.log("This API is using a deprecated version of Swagger!  Please see http://github.com/wordnik/swagger-core/wiki for more info");
      if (response.apiVersion != null) {
        this.apiVersion = response.apiVersion;
      }
      this.apis = {};
      this.apisArray = [];
      this.produces = response.produces;
      if (response.info != null) {
        this.info = response.info;
      }
      isApi = false;
      _ref = response.apis;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        api = _ref[_i];
        if (api.operations) {
          _ref1 = api.operations;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            operation = _ref1[_j];
            isApi = true;
          }
        }
      }
      if (response.basePath) {
        this.basePath = response.basePath;
      } else if (this.url.indexOf('?') > 0) {
        this.basePath = this.url.substring(0, this.url.lastIndexOf('?'));
      } else {
        this.basePath = this.url;
      }
      if (isApi) {
        newName = response.resourcePath.replace(/\//g, '');
        this.resourcePath = response.resourcePath;
        res = new SwaggerResource(response, this);
        this.apis[newName] = res;
        this.apisArray.push(res);
      } else {
        _ref2 = response.apis;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          resource = _ref2[_k];
          res = new SwaggerResource(resource, this);
          this.apis[res.name] = res;
          this.apisArray.push(res);
        }
      }
      if (this.success) {
        this.success();
      }
      return this;
    };

    SwaggerApi.prototype.selfReflect = function() {
      var resource, resource_name, _ref;
      if (this.apis == null) {
        return false;
      }
      _ref = this.apis;
      for (resource_name in _ref) {
        resource = _ref[resource_name];
        if (resource.ready == null) {
          return false;
        }
      }
      this.setConsolidatedModels();
      this.ready = true;
      if (this.success != null) {
        return this.success();
      }
    };

    SwaggerApi.prototype.fail = function(message) {
      this.failure(message);
      throw message;
    };

    SwaggerApi.prototype.setConsolidatedModels = function() {
      var model, modelName, resource, resource_name, _i, _len, _ref, _ref1, _results;
      this.modelsArray = [];
      this.models = {};
      _ref = this.apis;
      for (resource_name in _ref) {
        resource = _ref[resource_name];
        for (modelName in resource.models) {
          if (this.models[modelName] == null) {
            this.models[modelName] = resource.models[modelName];
            this.modelsArray.push(resource.models[modelName]);
          }
        }
      }
      _ref1 = this.modelsArray;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        model = _ref1[_i];
        _results.push(model.setReferencedModels(this.models));
      }
      return _results;
    };

    SwaggerApi.prototype.help = function() {
      var operation, operation_name, parameter, resource, resource_name, _i, _len, _ref, _ref1, _ref2;
      _ref = this.apis;
      for (resource_name in _ref) {
        resource = _ref[resource_name];
        console.log(resource_name);
        _ref1 = resource.operations;
        for (operation_name in _ref1) {
          operation = _ref1[operation_name];
          console.log("  " + operation.nickname);
          _ref2 = operation.parameters;
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            parameter = _ref2[_i];
            console.log("    " + parameter.name + (parameter.required ? ' (required)' : '') + " - " + parameter.description);
          }
        }
      }
      return this;
    };

    return SwaggerApi;

  })();

  SwaggerResource = (function() {
    SwaggerResource.prototype.api = null;

    SwaggerResource.prototype.produces = null;

    SwaggerResource.prototype.consumes = null;

    function SwaggerResource(resourceObj, api) {
      var consumes, e, obj, produces,
        _this = this;
      this.api = api;
      this.api = this.api;
      produces = [];
      consumes = [];
      this.path = this.api.resourcePath != null ? this.api.resourcePath : resourceObj.path;
      this.description = resourceObj.description;
      this.name = this.path.replace(/\//g,'').replace('.{format}', '');
      this.basePath = this.api.basePath;
      this.operations = {};
      this.operationsArray = [];
      this.modelsArray = [];
      this.models = {};
      if ((resourceObj.apis != null) && (this.api.resourcePath != null)) {
        this.addApiDeclaration(resourceObj);
      } else {
        if (this.path == null) {
          this.api.fail("SwaggerResources must have a path.");
        }
        if (this.path.substring(0, 4) === 'http') {
          this.url = this.path.replace('{format}', 'json');
        } else {
          this.url = this.api.basePath + this.path.replace('{format}', 'json');
        }
        this.api.progress('fetching resource ' + this.name + ': ' + this.url);
        obj = {
          url: this.url,
          method: "get",
          headers: {},
          on: {
            error: function(response) {
              return _this.api.fail("Unable to read api '" + _this.name + "' from path " + _this.url + " (server returned " + response.statusText + ")");
            },
            response: function(rawResponse) {
              var response;
              response = JSON.parse(rawResponse.content.data);
              if (response.basePath && !_this.api.serviceBasePath) {
                _this.api.serviceBasePath = response.basePath;
              }
              return _this.addApiDeclaration(response);
            }
          }
        };
        e = {};
        if (typeof window !== 'undefined') {
          e = window;
        } else {
          e = exports;
        }
        e.authorizations.apply(obj);
        new SwaggerHttp().execute(obj);
      }
    }

    SwaggerResource.prototype.addApiDeclaration = function(response) {
      var endpoint, _i, _len, _ref;
      if (response.produces != null) {
        this.produces = response.produces;
      }
      if (response.consumes != null) {
        this.consumes = response.consumes;
      }
      if ((response.basePath != null) && response.basePath.replace(/\s/g, '').length > 0) {
        this.basePath = response.basePath;
      }
      this.addModels(response.models);
      if (response.apis) {
        _ref = response.apis;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          endpoint = _ref[_i];
          this.addOperations(endpoint.path, endpoint.operations, response.consumes, response.produces);
        }
      }
      this.api[this.name] = this;
      this.ready = true;
      return this.api.selfReflect();
    };

    function getParentModel(modelName, _modelsWithSubtypes) {
      for(var _k = 0; _k < _modelsWithSubtypes.length; _k++) {
        var subType = _.find(_modelsWithSubtypes[_k].subTypes, function(m) {
          if(modelName === m) {
            return m;
          }
        });
        if(subType) {
          return _modelsWithSubtypes[_k];
        }
      }
      return null;
    };

    SwaggerResource.prototype.addModels = function(models) {
      var model, modelName, swaggerModel, _i, _len, _ref, _results, _modelsWithSubtypes;
      _modelsWithSubtypes = _.filter(models, function(m){ return m.subTypes && m.subTypes.length > 0 });
      if (models != null) {
        for (modelName in models) {
          if (this.models[modelName] == null) {
            swaggerModel = new SwaggerModel().create(modelName, models[modelName], getParentModel(modelName, _modelsWithSubtypes));
            this.modelsArray.push(swaggerModel);
            this.models[modelName] = swaggerModel;
          }
        }
        _ref = this.modelsArray;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          _results.push(model.setReferencedModels(this.models));
        }
        return _results;
      }
    };

    SwaggerResource.prototype.addOperations = function(resource_path, ops, consumes, produces) {
      var method, o, op, ref, responseMessages, type, _i, _len, _results;
      if (ops) {
        _results = [];
        for (_i = 0, _len = ops.length; _i < _len; _i++) {
          o = ops[_i];
          consumes = this.consumes;
          produces = this.produces;
          if (o.consumes != null) {
            consumes = o.consumes;
          } else {
            consumes = this.consumes;
          }
          if (o.produces != null) {
            produces = o.produces;
          } else {
            produces = this.produces;
          }
          type = o.type || o.responseClass;
          if (type === "array") {
            ref = null;
            if (o.items) {
              ref = o.items["type"] || o.items["$ref"];
            }
            type = "array[" + ref + "]";
          }
          responseMessages = o.responseMessages;
          method = o.method;
          if (o.httpMethod) {
            method = o.httpMethod;
          }
          if (o.supportedContentTypes) {
            consumes = o.supportedContentTypes;
          }
          if (o.errorResponses) {
            responseMessages = o.errorResponses;
          }
          o.nickname = this.sanitize(o.nickname);
          op = new SwaggerOperation(o.nickname, resource_path, method, o.parameters, o.summary, o.notes, type, responseMessages, this, consumes, produces, o.deprecated);
          this.operations[op.nickname] = op;
          _results.push(this.operationsArray.push(op));
        }
        return _results;
      }
    };

    SwaggerResource.prototype.sanitize = function(nickname) {
      var op;
      op = nickname.replace(/[\s!@#$%^&*()_+=\[{\]};:<>|./?,\\'""-]/g, '_');
      op = op.replace(/((_){2,})/g, '_');
      op = op.replace(/^(_)*/g, '');
      op = op.replace(/([_])*$/g, '');
      return op;
    };

    SwaggerResource.prototype.help = function() {
      var msg, operation, operation_name, parameter, _i, _len, _ref, _ref1, _results;
      _ref = this.operations;
      _results = [];
      for (operation_name in _ref) {
        operation = _ref[operation_name];
        msg = "  " + operation.nickname;
        _ref1 = operation.parameters;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          parameter = _ref1[_i];
          msg.concat("    " + parameter.name + (parameter.required ? ' (required)' : '') + " - " + parameter.description);
        }
        _results.push(msg);
      }
      return _results;
    };

    return SwaggerResource;

  })();

  SwaggerModel = (function() {
    function SwaggerModel() {
      this.properties = [];
      this.subTypes = [];
    }
     SwaggerModel.prototype.create = function (modelName, obj, parentModel) {
      var prop, propertyName, value, _i, _subTypeName, _reg, _refMapValueType;
      this.name = obj.id != null ? obj.id : modelName;
      this.desc = obj.description;
      this.parentName = parentModel && parentModel.id;
      this.desc = obj.description
      for (propertyName in obj.properties) {
        if (obj.required != null) {
          for (value in obj.required) {
            if (propertyName === obj.required[value]) {
              obj.properties[propertyName].required = true;
            }
          }
        }
        prop = new SwaggerModelProperty(propertyName, obj.properties[propertyName]);
        this.properties.push(prop);
      }
      if (obj.subTypes != null) {
        for (_i = 0; _i < obj.subTypes.length; _i++) {
          _subTypeName = obj.subTypes[_i];
          this.subTypes.push(new SwaggerSubType(_subTypeName));
        }
      }
      return this;
    };
    
    SwaggerModel.prototype.createMapModel = function (name, dataType, objs){
       this.id = name;
       this.name = name;
       this.isMapKeyModel = true;
       this.type = name;
       if(objs[dataType] === undefined){
       		prop = new SwaggerModelProperty(this.type, dataType);
       }
       else{
  	     	prop = new SwaggerModelProperty(this.type, objs[dataType]);
  	     	prop.refModel = objs[dataType];
        }  
       prop.refDataType = dataType;
       prop.dataType = dataType;
       this.properties.push(prop);
       return this;
    };

    SwaggerModel.prototype.setReferencedModels = function(allModels) {
      var prop, type, _i, _len, _ref, _results, _refValueType, _subType;
      _ref = this.properties;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        type = prop.type || prop.dataType;
        
        if (allModels[type] != null) {
          _results.push(prop.refModel = allModels[type]);
        } else if ((prop.refDataType != null) && (allModels[prop.refDataType] != null)) {
          _results.push(prop.refModel = allModels[prop.refDataType]);
        } else {
           _refValueType = type;
           if (allModels[_refValueType] != null) {
             _results.push(prop.refModel = allModels[_refValueType]);
           } 
        }
      }
      for (_i = 0; _i < this.subTypes.length; _i++) {
        _subType = this.subTypes[_i];
        type = _subType.name;
        if (allModels[type] != null) {
          _results.push(_subType.refModel = allModels[type]);
        }
      }
      return _results;
    };

    SwaggerModel.prototype.getMockSignature = function(modelsToIgnore) {
      var classClose, classOpen, prop, propertiesStr, subType, returnVal, strong, strongClose, stronger, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, parentClass;
      propertiesStr = [];
      _ref = this.properties;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        propertiesStr.push(prop.toString());
      }
      weak =  '<span class="weak">';
      strong = '<span class="strong">';
      stronger = '<span class="stronger">';
      strongClose = '</span>';
      weakClose = strongClose;
      parentClass = this.parentName ? " : " + this.parentName : "";
      classOpen = this.desc != null ? strong + this.name + parentClass + strongClose + weak + ' - ' + this.desc + weakClose + strong + ' {' + strongClose : strong + this.name + ' {' + strongClose;
      classClose = strong + '}' + strongClose;
      returnVal = classOpen + '<div>' + propertiesStr.join('</div><div>') + '</div>' + classClose;
      if (!modelsToIgnore) {
        modelsToIgnore = [];
      }
      modelsToIgnore.push(this);
      _ref1 = this.properties;      
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        prop = _ref1[_j];
 		if ((prop.refModel != null) && (modelsToIgnore.indexOf(prop.refModel)) === -1) {
          returnVal = returnVal + ('<br>' + prop.refModel.getMockSignature(modelsToIgnore));
        }
      }
      _ref2 = this.subTypes;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        subType = _ref2[_k];
        if ((subType.refModel != null) && (modelsToIgnore.indexOf(subType.refModel)) === -1) {
          returnVal = returnVal + ('<br>' + subType.refModel.getMockSignature(modelsToIgnore));
        }
      }
      return returnVal;
    };

    SwaggerModel.prototype.createJSONSample = function(modelsToIgnore) {
      var prop, result, _i, _len, _ref;
      result = {};
      modelsToIgnore = modelsToIgnore || [];
      modelsToIgnore.push(this.name);
      _ref = this.properties;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        result[prop.name] = prop.getSampleValue(modelsToIgnore);
      }
      modelsToIgnore.pop(this.name);
      return result;
    };

    return SwaggerModel;

  })();

  SwaggerModelProperty = (function() {
    function SwaggerModelProperty(name, obj) {
      this.name = name;
      this.dataType = obj.type || obj.dataType || obj["$ref"];
      this.isCollection = this.dataType && (this.dataType.toLowerCase() === 'array' || this.dataType.toLowerCase() === 'list' || this.dataType.toLowerCase() === 'set');
      this.descr = obj.description;
      this.required = obj.required;
      if (obj.items != null) {
        if (obj.items.type != null) {
          this.refDataType = obj.items.type;
        }
        if (obj.items.$ref != null) {
          this.refDataType = obj.items.$ref;
        }
        
        //to handle enums with in a collection type
        this.setEnumValues(obj.items.enum);
        
      }
      this.dataTypeWithRef = this.refDataType != null ? this.dataType + '[' + this.refDataType + ']' : this.dataType;
      if (obj.allowableValues != null) {
        this.valueType = obj.allowableValues.valueType;
        this.values = obj.allowableValues.values;
        if (this.values != null) {
          this.valuesString = "'" + this.values.join("' or '") + "'";
        }
      }
      
      this.isMap = false;
      _reg = new RegExp('map\\[(.*)\\]', 'gi');
      mapPattern = _reg.exec(this.dataType);
      if (mapPattern != null && mapPattern.length > 1)
      {
      	this.isMap = true;     	
      	this.refDataType = mapPattern[1].split(',').pop();
      }
      
      this.setEnumValues(obj["enum"]);
    
    }

    SwaggerModelProperty.prototype.getSampleValue = function(modelsToIgnore) {
      var result, jsonModel;
      
      if (this.isMap && this.refDataType !== null) {
        mapRefModels = [];
        if(this.refModel === undefined){
          jsonModel = new SwaggerModel().createMapModel("key", this.refDataType, mapRefModels);
        }
        else {
          mapRefModels[this.refDataType]=this.refModel;  
          jsonModel = new SwaggerModel().createMapModel("key", this.refModel.name, mapRefModels);
        }
      }
      else{
        jsonModel = this.refModel;
      }
      if ((jsonModel != null) && (modelsToIgnore.indexOf(jsonModel.name) === -1)) {
        result = jsonModel.createJSONSample(modelsToIgnore);
      } else {
        if (this.isCollection) {
          result = this.refDataType;
        } else {
          result = this.dataType;
        }
      }
      if (this.isCollection) {
        return [result];
      } else {
        return result;
      }
    };

    SwaggerModelProperty.prototype.toString = function() {
      var req, str, propName;
      req = 'propReq';
      propName = this.name;
      if (!this.required && SwaggerUiConfig.showOptionalPropertiesTag) {
        req = 'propOpt';
      }
      if (this.required && !SwaggerUiConfig.showOptionalPropertiesTag) {
        propName += ' *';
      }
      str = '<span class="propName ' + req + '">' + propName + '</span> (<span class="propType">' + this.dataTypeWithRef + '</span>';
      if (!this.required && SwaggerUiConfig.showOptionalPropertiesTag) {
        str += ', <span class="propOptKey">optional</span>';
      }
      str += ')';
      if (this.values != null) {
        str += " = <span class='propVals'>['" + this.values.join("' or '") + "']</span>";
      }
      if (this.descr != null) {
        str += ': <span class="propDesc">' + this.descr + '</span>';
      }
      return str;
    };
  
	SwaggerModelProperty.prototype.setEnumValues = function(enumValues)
     {
     	if (enumValues != null) 
     	{
        	this.valueType = "string";
        	this.values = enumValues;
        	if (this.values != null) 
        	{
          		this.valueString = "'" + this.values.join("' or '") + "'";
        	}
        }
     	return;
     };


 	return SwaggerModelProperty;

  })();

  SwaggerSubType = (function() {

    function SwaggerSubType(modelName) {
      this.name = modelName;
    }

    return SwaggerSubType;
    
  })();

  SwaggerOperation = (function() {
    function SwaggerOperation(nickname, path, method, parameters, summary, notes, type, responseMessages, resource, consumes, produces, deprecated) {
      var parameter, v, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _modelsToIgnore = [],
        _this = this;
      this.nickname = nickname;
      this.path = path;
      this.method = method;
      this.parameters = parameters != null ? parameters : [];
      this.summary = summary;
      this.notes = notes;
      this.type = type;
      this.responseMessages = responseMessages;
      this.resource = resource;
      this.consumes = consumes;
      this.produces = produces;
      this.deprecated = deprecated;
      this["do"] = __bind(this["do"], this);
      if (this.nickname == null) {
        this.resource.api.fail("SwaggerOperations must have a nickname.");
      }
      if (this.path == null) {
        this.resource.api.fail("SwaggerOperation " + nickname + " is missing path.");
      }
      if (this.method == null) {
        this.resource.api.fail("SwaggerOperation " + nickname + " is missing method.");
      }
      this.path = this.path.replace('{format}', 'json');
      this.method = this.method.toLowerCase();
      this.isGetMethod = this.method === "get";
      this.resourceName = this.resource.name;
      if (((_ref = this.type) != null ? _ref.toLowerCase() : void 0) === 'void') {
        this.type = void 0;
      }

      if (this.type != null) {
        this.isResponseClassPrimitive = this.isPrimitive(this.type, this.resource.models);
        this.responseClassSignature = this.getSignature(this.type, this.isResponseClassPrimitive, this.resource.models, _modelsToIgnore);
        this.responseSampleJSON = this.getSampleJSON(this.type, this.isResponseClassPrimitive, this.resource.models);
      }
      this.responseMessages = this.responseMessages || [];
      _ref1 = this.parameters;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        parameter = _ref1[_i];
        parameter.name = parameter.name || parameter.type || parameter.dataType;
        type = parameter.type || parameter.dataType;
        if (type === "array") {
            var typeRef = null;
            if (parameter.items) {
              typeRef = parameter.items["type"] || parameter.items["$ref"];
            }
            type = "array[" + typeRef + "]";
        }
        if (type.toLowerCase() === 'boolean') {
          parameter.allowableValues = {};
          parameter.allowableValues.values = ["true", "false"];
        }
        if (SwaggerUiConfig.showParameterDataTypeColumn) {
          _modelsToIgnore = [] 
        }

        parameter.isPrimitive = this.isPrimitive(type, this.resource.models);
        parameter.signature = this.getSignature(type, parameter.isPrimitive, this.resource.models, _modelsToIgnore);
        parameter.sampleJSON = this.getSampleJSON(type, parameter.isPrimitive, this.resource.models);
        if (parameter["enum"] != null) {
          parameter.isList = true;
          parameter.allowableValues = {};
          parameter.allowableValues.descriptiveValues = [];
          _ref2 = parameter["enum"];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            v = _ref2[_j];
            if ((parameter.defaultValue != null) && parameter.defaultValue === v) {
              parameter.allowableValues.descriptiveValues.push({
                value: v,
                isDefault: true
              });
            } else {
              parameter.allowableValues.descriptiveValues.push({
                value: v,
                isDefault: false
              });
            }
          }
        }
        if (parameter.allowableValues != null) {
          if (parameter.allowableValues.valueType === "RANGE") {
            parameter.isRange = true;
          } else {
            parameter.isList = true;
          }
          if (parameter.allowableValues.values != null) {
            parameter.allowableValues.descriptiveValues = [];
            _ref3 = parameter.allowableValues.values;
            for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
              v = _ref3[_k];
              if ((parameter.defaultValue != null) && parameter.defaultValue === v) {
                parameter.allowableValues.descriptiveValues.push({
                  value: v,
                  isDefault: true
                });
              } else {
                parameter.allowableValues.descriptiveValues.push({
                  value: v,
                  isDefault: false
                });
              }
            }
          }
        }
      }
      this.resource[this.nickname] = function(args, callback, error) {
        return _this["do"](args, callback, error);
      };
      this.resource[this.nickname].help = function() {
        return _this.help();
      };
    }

    SwaggerOperation.prototype.isListType = function(type) {
      if (type.indexOf('[') >= 0) {
        return type.substring(type.indexOf('[') + 1, type.indexOf(']'));
      } else {
        return void 0;
      }
    };

    SwaggerOperation.prototype.isPrimitive = function(type, models) {
      var isPrimitive, listType;
      listType = this.isListType(type);
      isPrimitive = ((listType != null) && models[listType]) || (models[type] != null) ? false : true;
      return isPrimitive;
    };

    SwaggerOperation.prototype.getSignature = function(type, isPrimitive, models, modelsToIgnore) {
      var listType;
      listType = this.isListType(type);
      if (isPrimitive) {
        return type;
      } else {  
        if (listType != null) {
          if (modelsToIgnore.indexOf(models[listType]) !== -1) {
            return null;
          }
          return models[listType].getMockSignature(modelsToIgnore);
        } else {
          if (modelsToIgnore.indexOf(models[type]) !== -1) {
            return null;
          }
          return models[type].getMockSignature(modelsToIgnore);
        }
      }
    };

    SwaggerOperation.prototype.getSampleJSON = function(type, isPrimitive, models) {
      var listType, val;
      listType = this.isListType(type);
      val = isPrimitive ? void 0 : (listType != null ? models[listType].createJSONSample() : models[type].createJSONSample());
      if (val) {
        val = listType ? [val] : val;
        return JSON.stringify(val, null, 2);
      }
    };

    SwaggerOperation.prototype["do"] = function(args, opts, callback, error) {
      var key, param, params, possibleParams, req, requestContentType, responseContentType, value, _i, _len, _ref;
      if (args == null) {
        args = {};
      }
      if (opts == null) {
        opts = {};
      }
      requestContentType = null;
      responseContentType = null;
      if ((typeof args) === "function") {
        error = opts;
        callback = args;
        args = {};
      }
      if ((typeof opts) === "function") {
        error = callback;
        callback = opts;
      }
      if (error == null) {
        error = function(xhr, textStatus, error) {
          return console.log(xhr, textStatus, error);
        };
      }
      if (callback == null) {
        callback = function(data) {
          var content;
          content = null;
          if (data.content != null) {
            content = data.content.data;
          } else {
            content = "no data";
          }
          return console.log("default callback: " + content);
        };
      }
      params = {};
      params.headers = [];
      if (args.headers != null) {
        params.headers = args.headers;
        delete args.headers;
      }
      _ref = this.parameters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        param = _ref[_i];
        if (param.paramType === "header") {
          if (args[param.name]) {
            params.headers[param.name] = args[param.name];
          }
        }
      }
      if (args.body != null) {
        params.body = args.body;
        delete args.body;
      }
      possibleParams = (function() {
        var _j, _len1, _ref1, _results;
        _ref1 = this.parameters;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          param = _ref1[_j];
          if (param.paramType === "form" || param.paramType.toLowerCase() === "file") {
            _results.push(param);
          }
        }
        return _results;
      }).call(this);
      if (possibleParams) {
        for (key in possibleParams) {
          value = possibleParams[key];
          if (args[value.name]) {
            params[value.name] = args[value.name];
          }
        }
      }
      req = new SwaggerRequest(this.method, this.urlify(args), params, opts, callback, error, this);
      if (opts.mock != null) {
        return req;
      } else {
        return true;
      }
    };

    SwaggerOperation.prototype.pathJson = function() {
      return this.path.replace("{format}", "json");
    };

    SwaggerOperation.prototype.pathXml = function() {
      return this.path.replace("{format}", "xml");
    };
    
    SwaggerOperation.prototype.encodePathParam = function(pathParam) {
  var encParts, part, parts, _i, _len;
  pathParam = pathParam.toString();
  if (pathParam.indexOf("/") === -1) {
    return encodeURIComponent(pathParam);
  } else {
    parts = pathParam.split("/");
    encParts = [];
    for (_i = 0, _len = parts.length; _i < _len; _i++) {
      part = parts[_i];
      encParts.push(encodeURIComponent(part));
    }
    return encParts.join("/");
  }
};

    SwaggerOperation.prototype.urlify = function(args) {
      var param, queryParams, reg, url, _i, _j, _len, _len1, _ref, _ref1;
      url = convertUrl(this.resource.basePath) + this.pathJson(); 

      _ref = this.parameters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        param = _ref[_i];
        if (param.paramType === 'path') {
          if (args[param.name]) {
            reg = new RegExp('\{' + param.name + '[^\}]*\}', 'gi');
            url = url.replace(reg, encodeURIComponent(args[param.name]));
            delete args[param.name];
          } else {
            throw "" + param.name + " is a required path param.";
          }
        }
      }
      queryParams = "";
      _ref1 = this.parameters;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        param = _ref1[_j];
        if (param.paramType === 'query') {
          if (args[param.name]) {
            if (queryParams !== "") {
              queryParams += "&";
            }
            queryParams += encodeURIComponent(param.name) + '=' + encodeURIComponent(args[param.name]);
          }
        }
      }
      if ((queryParams != null) && queryParams.length > 0) {
        url += "?" + queryParams;
      }
      return url;
    };

    SwaggerOperation.prototype.supportHeaderParams = function() {
      return this.resource.api.supportHeaderParams;
    };

    SwaggerOperation.prototype.supportedSubmitMethods = function() {
      return this.resource.api.supportedSubmitMethods;
    };

    SwaggerOperation.prototype.getQueryParams = function(args) {
      return this.getMatchingParams(['query'], args);
    };

    SwaggerOperation.prototype.getHeaderParams = function(args) {
      return this.getMatchingParams(['header'], args);
    };

    SwaggerOperation.prototype.getMatchingParams = function(paramTypes, args) {
      var matchingParams, name, param, value, _i, _len, _ref, _ref1;
      matchingParams = {};
      _ref = this.parameters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        param = _ref[_i];
        if (args && args[param.name]) {
          matchingParams[param.name] = args[param.name];
        }
      }
      _ref1 = this.resource.api.headers;
      for (name in _ref1) {
        value = _ref1[name];
        matchingParams[name] = value;
      }
      return matchingParams;
    };

    SwaggerOperation.prototype.help = function() {
      var msg, parameter, _i, _len, _ref;
      msg = "";
      _ref = this.parameters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        parameter = _ref[_i];
        if (msg !== "") {
          msg += "\n";
        }
        msg += "* " + parameter.name + (parameter.required ? ' (required)' : '') + " - " + parameter.description;
      }
      return msg;
    };

    return SwaggerOperation;

  })();

  var SwaggerRequest = function(type, url, params, opts, successCallback, errorCallback, operation, execution) {
  var _this = this;
  var errors = [];
  this.useJQuery = (typeof operation.resource.useJQuery !== 'undefined' ? operation.resource.useJQuery : null);
  this.type = (type||errors.push("SwaggerRequest type is required (get/post/put/delete/patch/options)."));
  this.url = (url||errors.push("SwaggerRequest url is required."));
  this.url = convertUrl(url);
  this.params = params;
  this.opts = opts;
  this.successCallback = (successCallback||errors.push("SwaggerRequest successCallback is required."));
  this.errorCallback = (errorCallback||errors.push("SwaggerRequest error callback is required."));
  this.operation = (operation||errors.push("SwaggerRequest operation is required."));
  this.execution = execution;
  this.headers = (params.headers||{});

  if(errors.length > 0) {
    throw errors;
  }

  this.type = this.type.toUpperCase();

  // set request, response content type headers
  var headers = this.setHeaders(params, this.operation);
  var body = params.body;

  // encode the body for form submits
  if (headers["Content-Type"]) {
    var values = {};
    var i;
    var operationParams = this.operation.parameters;
    for(i = 0; i < operationParams.length; i++) {
      var param = operationParams[i];
      if(param.paramType === "form")
        values[param.name] = param;
    }

    if(headers["Content-Type"].indexOf("application/x-www-form-urlencoded") === 0) {
      var encoded = "";
      var key;
      for(key in values) {
        value = this.params[key];
        if(typeof value !== 'undefined'){
          if(encoded !== "")
            encoded += "&";
          encoded += encodeURIComponent(key) + '=' + encodeURIComponent(value);
        }
      }
      body = encoded;
    }
    else if (headers["Content-Type"].indexOf("multipart/form-data") === 0) {
      // encode the body for form submits
      var data = "";
      var boundary = "----SwaggerFormBoundary" + Date.now();
      var key;
      for(key in values) {
        value = this.params[key];
        if(typeof value !== 'undefined') {
          data += '--' + boundary + '\n';
          data += 'Content-Disposition: form-data; name="' + key + '"';
          data += '\n\n';
          data += value + "\n";
        }
      }
      data += "--" + boundary + "--\n";
      headers["Content-Type"] = "multipart/form-data; boundary=" + boundary;
      body = data;
    }
  }

  if (!((this.headers != null) && (this.headers.mock != null))) {
    obj = {
      url: this.url,
      method: this.type,
      headers: headers,
      body: body,
      useJQuery: this.useJQuery,
      on: {
        error: function(response) {
          return _this.errorCallback(response, _this.opts.parent);
        },
        redirect: function(response) {
          return _this.successCallback(response, _this.opts.parent);
        },
        307: function(response) {
          return _this.successCallback(response, _this.opts.parent);
        },
        response: function(response) {
          return _this.successCallback(response, _this.opts.parent);
        }
      }
    };
    var e;
    if (typeof window !== 'undefined') {
      e = window;
    } else {
      e = exports;
    }
    status = e.authorizations.apply(obj, this.operation.authorizations);
    if (opts.mock == null) {
      if (status !== false) {
        new SwaggerHttp().execute(obj);
      } else {
        obj.canceled = true;
      }
    } else {
      return obj;
    }
  }
};

SwaggerRequest.prototype.setHeaders = function(params, operation) {
  // default type
  var accepts = "application/json";
  var consumes = "application/json";

  var allDefinedParams = this.operation.parameters;
  var definedFormParams = [];
  var definedFileParams = [];
  var body = params.body;
  var headers = {};

  // get params from the operation and set them in definedFileParams, definedFormParams, headers
  var i;
  for(i = 0; i < allDefinedParams.length; i++) {
    var param = allDefinedParams[i];
    if(param.paramType === "form")
      definedFormParams.push(param);
    else if(param.paramType === "file")
      definedFileParams.push(param);
    else if(param.paramType === "header" && this.params.headers) {
      var key = param.name;
      var headerValue = this.params.headers[param.name];
      if(typeof this.params.headers[param.name] !== 'undefined')
        headers[key] = headerValue;
    }
  }

  // if there's a body, need to set the accepts header via requestContentType
  if (body && (this.type === "POST" || this.type === "PUT" || this.type === "PATCH" || this.type === "DELETE")) {
    if (this.opts.requestContentType)
      accepts = this.opts.requestContentType;
  } else {
    // if any form params, content type must be set
    if(definedFormParams.length > 0) {
      if(definedFileParams.length > 0)
        consumes = "multipart/form-data";
      else
        consumes = "application/x-www-form-urlencoded";
    }
    else if (this.type == "DELETE")
      body = "{}";
    else if (this.type != "DELETE")
      accepts = null;
  }

  if (consumes && this.operation.consumes) {
    if (this.operation.consumes.indexOf(consumes) === -1) {
      log("server doesn't consume " + consumes + ", try " + JSON.stringify(this.operation.consumes));
      consumes = this.operation.consumes[0];
    }
  }

  if (this.opts.responseContentType) {
    accepts = this.opts.responseContentType;
  } else {
    accepts = "application/json";
  }
  if (accepts && this.operation.produces) {
    if (this.operation.produces.indexOf(accepts) === -1) {
      log("server can't produce " + accepts);
      accepts = this.operation.produces[0];
    }
  }

  if ((consumes && typeof body !== 'undefined') || (consumes === "application/x-www-form-urlencoded"))
    headers["Content-Type"] = consumes;
  if (accepts)
    headers["Accept"] = accepts;
  return headers;
}

SwaggerRequest.prototype.asCurl = function() {
  var results = [];
  if(this.headers) {
    var key;
    for(key in this.headers) {
      results.push("--header \"" + key + ": " + this.headers[v] + "\"");
    }
  }
  return "curl " + (results.join(" ")) + " " + this.url;
};

  SwaggerHttp = (function() {
    SwaggerHttp.prototype.Shred = null;

    SwaggerHttp.prototype.shred = null;

    SwaggerHttp.prototype.content = null;

    function SwaggerHttp() {
      var identity, toString,
        _this = this;
      if (typeof window !== 'undefined') {
        this.Shred = require("./shred");
      } else {
        this.Shred = require("shred");
      }
      this.shred = new this.Shred();
      identity = function(x) {
        return x;
      };
      toString = function(x) {
        return x.toString();
      };
      if (typeof window !== 'undefined') {
        this.content = require("./shred/content");
        this.content.registerProcessor(["application/json; charset=utf-8", "application/json", "json"], {
          parser: identity,
          stringify: toString
        });
      } else {
        this.Shred.registerProcessor(["application/json; charset=utf-8", "application/json", "json"], {
          parser: identity,
          stringify: toString
        });
      }
    }

    SwaggerHttp.prototype.execute = function(obj) {
      return this.shred.request(obj);
    };

    return SwaggerHttp;

  })();

  SwaggerAuthorizations = (function() {
    SwaggerAuthorizations.prototype.authz = null;

    function SwaggerAuthorizations() {
      this.authz = {};
    }

    SwaggerAuthorizations.prototype.add = function(name, auth) {
      this.authz[name] = auth;
      return auth;
    };

    SwaggerAuthorizations.prototype.apply = function(obj) {
      var key, value, _ref, _results;
      _ref = this.authz;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(value.apply(obj));
      }
      return _results;
    };

    return SwaggerAuthorizations;

  })();

  ApiKeyAuthorization = (function() {
    ApiKeyAuthorization.prototype.type = null;

    ApiKeyAuthorization.prototype.name = null;

    ApiKeyAuthorization.prototype.value = null;

    function ApiKeyAuthorization(name, value, type) {
      this.name = name;
      this.value = value;
      this.type = type;
    }

    ApiKeyAuthorization.prototype.apply = function(obj) {
      if (this.type === "query") {
        if (obj.url.indexOf('?') > 0) {
          obj.url = obj.url + "&" + this.name + "=" + this.value;
        } else {
          obj.url = obj.url + "?" + this.name + "=" + this.value;
        }
        return true;
      } else if (this.type === "header") {
        return obj.headers[this.name] = this.value;
      }
    };

    return ApiKeyAuthorization;

  })();

  PasswordAuthorization = (function() {
    PasswordAuthorization.prototype.name = null;

    PasswordAuthorization.prototype.username = null;

    PasswordAuthorization.prototype.password = null;

    function PasswordAuthorization(name, username, password) {
      this.name = name;
      this.username = username;
      this.password = password;
    }

    PasswordAuthorization.prototype.apply = function(obj) {
      return obj.headers["Authorization"] = "Basic " + btoa(this.username + ":" + this.password);
    };

    return PasswordAuthorization;

  })();

  this.SwaggerApi = SwaggerApi;

  this.SwaggerResource = SwaggerResource;

  this.SwaggerOperation = SwaggerOperation;

  this.SwaggerRequest = SwaggerRequest;

  this.SwaggerModelProperty = SwaggerModelProperty;
  
  this.SwaggerSubType = SwaggerSubType;

  this.ApiKeyAuthorization = ApiKeyAuthorization;

  this.PasswordAuthorization = PasswordAuthorization;

  this.authorizations = new SwaggerAuthorizations();

}).call(this);
